Day2

加密算法主要有以下几种分类：
1.为确保数据机密性算法：
a) 对称加密算法(AES,DES)
b) 非对称加密算法（RSA，DSA）
2.为确保数据完整性算法：
a) 信息摘要（MD5，SHA256，SHA512）

检查文件的MD5校验和
md5sum a.txt    (对a.txt检验MD5)

---------------------------------------------------------------------
vimdiff 文件1 文件2 （判断两文件的不同的地方）
---------------------------------------------------------------------

使用GPG对称加密方式保护文件
yum -y install gnupg2  
gpg -c file2.txt                  //gpg使用对称加密算法加密数据的操作
cat file2.txt.gpg                 //查看为加密码

gpg -d file2.txt.gpg > file2.txt      //解密后保存
----------------------------------------------------------------------
使用GPG非对称加密方式保护文件
非对称加密/解密文件时，UserA生成私钥与公钥，并把公钥发送给UserB，UserB使用公钥加密数据，并把加密后的数据传给UserA，UserA最后使用自己的私钥解密数据。
实现过程如下所述。
1）接收方UserA创建自己的公钥、私钥对(在192.168.4.100操作)
执行gpg --gen-key操作，根据提示选择并创建密钥：
gpg --gen-key

2）UserA导出自己的公钥文件(在192.168.4.100操作)
用户的公钥、私钥信息分别保存在pubring.gpg和secring.gpg文件内：
gpg --list-keys
   
3）UserA导出自己的公钥文件(在192.168.4.100操作)
gpg -a --export UserA > /tmp/UserA.pub

4)传给对方公要
scp ---->
gpg -a --import /tmp/UserA.pub[公钥文件名]
gpg -e -r UserA【用户】 love.txt【文件】
4）UserA以自己的私钥解密文件（在192.168.4.100操作）
用户的公钥、私钥信息分别保存在pubring.gpg和secring.gpg文件内：
gpg -d love.txt.gpg > love.txt

-----------------------------------------------------------------------------------------------------------
使用GPG的签名机制，检查数据来源的正确性

使用私钥签名的文件，是可以使用对应的公钥验证签名的，只要验证成功，则说明这个文件一定是出自对应的私钥签名，除非私钥被盗，否则一定能证明这个文件来自于某个人！
1）在client(192.168.4.100)上，UserA为软件包创建分离式签名
 gpg -b a.txt                      //创建分离式数字签名 
 gpg --verify a.txt.sig a.txt       //验证分析是否可信
使用GPG的签名机制，检查数据来源的正确性

-------------------------------------------------------------------------------------------------------------
使用AIDE做入侵检测 ---全面的检测（hash值，权限，大小等改变）

1.安装aide软件
2.执行初始化校验操作，生成校验数据库文件
3.备份数据库文件到安全的地方
4.使用数据库执行入侵检测操作

yum -y install aide
vim /etc/aide.conf   //修改配置文件
【根据需要修改配置文件中的内容】

初始化数据库，入侵后检测
aide --init         //入侵前对数据进行校验，生成初始化数据库【输出】带new的文件，需要修改名字没有NEW

aide --check        //检查哪些数据发生了变化【读】【对带new的文件进行对比】
----------------------------------------------------------------------------------------------------------------------
扫描与抓包分析
使用NMAP扫描来获取指定主机/网段的相关信息
使用tcpdump分析FTP访问中的明文交换信息

yum -y install nmap
// -sS，TCP SYN扫描（半开）【三次握手只进行2次】【效率更高时间更短】
// -sT，TCP 连接扫描（全开）【三次握手作完】
// -sU，UDP扫描
// -sP，ICMP扫描【可跨过防火墙】
// -A，目标系统全面分析

nmap 192.168.4.100  【检查192.168.4.0/24网段内哪些主机开启了FTP、SSH服务】
nmap -sT 201.1.1.5  【pingip是否可以ping通】
nmap -sT 201.1.1.0/24 【ping一个网段】
----------------------------------------------------------
traceroute www.baidu.com
查看访问百度的跳数
***表示防火墙禁止追踪
---------------------------------------------------------
检查目标主机所开启的UDP服务
nmap   -sU  192.168.4.100                //指定-sU扫描UDP

GNU--->自由软件组织：
使用GPG的签名机制，检查数据来源的正确性

使用私钥签名的文件，是可以使用对应的公钥验证签名的，只要验证成功，则说明这个文件一定是出自对应的私钥签名，除非私钥被盗，否则一定能证明这个文件来自于某个人！
1）在client(192.168.4.100)上，UserA为软件包创建分离式签名

tcpdump
-------------------------------------------------------------------------------------------------------------------
[root@proxy ~]# tcpdump  -A  host 192.168.4.5  and  tcp  port  80

监控选项如下：
// -i，指定监控的网络接口（默认监听第一个网卡）
// -A，转换为 ACSII 码，以方便阅读
// -w，将数据包信息保存到指定文件
// -r，从指定文件读取数据包信息
//tcpdump的过滤条件：
// 类型：host、net、port、portrange
// 方向：src、dst
// 协议：tcp、udp、ip、wlan、arp、……
// 多个条件组合：and、or、not

执行FTP访问，并观察tcpdump抓包结果
参考前面的测试操作，从192.168.4.5访问主机192.168.4.100的vsftpd服务。然后使用tcpdump抓包，仔细分析FTP连接的建立过程、确认收集到的用户名和口令信息。
tcpdump -A host 192.168.4.5 and tcp port 80
a----------b
c无法抓到a---b的包
c抓到的就是第一次的a-----b广播包（即非接触无法抓包）


1.可以通过在交换机上有一个端口做了端口镜像，经过该交换机的数据就可以通过该端口抓包
2.可以伪装成b机进行抓包（让a发给c）（地址欺骗）
3.电脑上这是伪装的网关搭建dhcp让别人经过这个地方（地址欺骗）

